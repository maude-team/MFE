set trace on .
set trace select on .
trace select metaNarrowingSearch .
set print conceal off .

red prepNarrowingSols(
fmod 'NAT-ACU is
  nil
  sorts 'Nat ; 'NzNat ; 'Truth ; 'Zero .
  subsort 'NzNat < 'Nat .
  subsort 'Zero < 'Nat .
  op '0 : nil -> 'Zero [ctor] .
  op '1 : nil -> 'NzNat [ctor] .
  op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm] .
  op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Zero)] .
  op '_+_ : 'NzNat 'NzNat -> 'NzNat [assoc comm ctor id('0.Zero)] .
  op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
  op '_>_ : 'Nat 'Nat -> 'Truth [none] .
  op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
  op '_\_ : 'Nat 'Nat -> 'Nat [none] .
  op '_~_ : 'Nat 'Nat -> 'Truth [comm] .
  op 'd : 'Nat 'Nat -> 'Nat [comm] .
  op 'ff : nil -> 'Truth [ctor] .
  op 'gcd : 'NzNat 'NzNat -> 'NzNat [comm] .
  op 'max : 'Nat 'Nat -> 'Nat [comm] .
  op 'min : 'Nat 'Nat -> 'Nat [comm] .
  op 'p : 'NzNat -> 'Nat [none] .
  op 'quot : 'Nat 'NzNat -> 'Nat [none] .
  op 'tt : nil -> 'Truth [ctor] .
  op '~ : 'Truth -> 'Truth [none] .
  none
  eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,'M':NzNat]],'_*_[
    'N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
  eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat],'X@@@:`[Nat`]] = '_*_['X@@@:`[Nat`],'_+_['_*_['N?:`[Nat`],
    'N':NzNat,'M':NzNat],'_*_['N?:`[Nat`],'N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
  eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant label('bool02)] .
  eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant label('bool01)] .
  eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .
  eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant label('bool03)] .
  eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant label('bool04)] .
  eq '~['ff.Truth] = 'tt.Truth [variant label('bool06)] .
  eq '~['tt.Truth] = 'ff.Truth [variant label('bool05)] .
endfm,
  getLabel(eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,
      'M':NzNat]],'_*_['N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .),
  getLabel(eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .),
  getCts(
    makeNarrowingModule(
    fmod 'NAT-ACU is
      nil
      sorts 'Nat ; 'NzNat ; 'Truth ; 'Zero .
      subsort 'NzNat < 'Nat .
      subsort 'Zero < 'Nat .
      op '0 : nil -> 'Zero [ctor] .
      op '1 : nil -> 'NzNat [ctor] .
      op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm] .
      op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm] .
      op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Zero)] .
      op '_+_ : 'NzNat 'NzNat -> 'NzNat [assoc comm ctor id('0.Zero)] .
      op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
      op '_>_ : 'Nat 'Nat -> 'Truth [none] .
      op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
      op '_\_ : 'Nat 'Nat -> 'Nat [none] .
      op '_~_ : 'Nat 'Nat -> 'Truth [comm] .
      op 'd : 'Nat 'Nat -> 'Nat [comm] .
      op 'ff : nil -> 'Truth [ctor] .
      op 'gcd : 'NzNat 'NzNat -> 'NzNat [comm] .
      op 'max : 'Nat 'Nat -> 'Nat [comm] .
      op 'min : 'Nat 'Nat -> 'Nat [comm] .
      op 'p : 'NzNat -> 'Nat [none] .
      op 'quot : 'Nat 'NzNat -> 'Nat [none] .
      op 'tt : nil -> 'Truth [ctor] .
      op '~ : 'Truth -> 'Truth [none] .
      none
      eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,'M':NzNat]],'_*_[
        'N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
      eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat],'X@@@:`[Nat`]] = '_*_['X@@@:`[Nat`],'_+_['_*_['N?:`[Nat`],
        'N':NzNat,'M':NzNat],'_*_['N?:`[Nat`],'N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
      eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant label('bool02)] .
      eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant label('bool01)] .
      eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .
      eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant label('bool03)] .
      eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant label('bool04)] .
      eq '~['ff.Truth] = 'tt.Truth [variant label('bool06)] .
      eq '~['tt.Truth] = 'ff.Truth [variant label('bool05)] .
    endfm,
      eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,
          'M':NzNat]],'_*_['N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .,
      eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .)),
  metaNarrowSearch(
    getModule(
      makeNarrowingModule(
      fmod 'NAT-ACU is
        nil
        sorts 'Nat ; 'NzNat ; 'Truth ; 'Zero .
        subsort 'NzNat < 'Nat .
        subsort 'Zero < 'Nat .
        op '0 : nil -> 'Zero [ctor] .
        op '1 : nil -> 'NzNat [ctor] .
        op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm] .
        op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm] .
        op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Zero)] .
        op '_+_ : 'NzNat 'NzNat -> 'NzNat [assoc comm ctor id('0.Zero)] .
        op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
        op '_>_ : 'Nat 'Nat -> 'Truth [none] .
        op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
        op '_\_ : 'Nat 'Nat -> 'Nat [none] .
        op '_~_ : 'Nat 'Nat -> 'Truth [comm] .
        op 'd : 'Nat 'Nat -> 'Nat [comm] .
        op 'ff : nil -> 'Truth [ctor] .
        op 'gcd : 'NzNat 'NzNat -> 'NzNat [comm] .
        op 'max : 'Nat 'Nat -> 'Nat [comm] .
        op 'min : 'Nat 'Nat -> 'Nat [comm] .
        op 'p : 'NzNat -> 'Nat [none] .
        op 'quot : 'Nat 'NzNat -> 'Nat [none] .
        op 'tt : nil -> 'Truth [ctor] .
        op '~ : 'Truth -> 'Truth [none] .
        none
        eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,'M':NzNat]],'_*_[
          'N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
        eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat],'X@@@:`[Nat`]] = '_*_['X@@@:`[Nat`],'_+_['_*_['N?:`[Nat`],
          'N':NzNat,'M':NzNat],'_*_['N?:`[Nat`],'N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
        eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant label('bool02)] .
        eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant label('bool01)] .
        eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .
        eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant label('bool03)] .
        eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant label('bool04)] .
        eq '~['ff.Truth] = 'tt.Truth [variant label('bool06)] .
        eq '~['tt.Truth] = 'ff.Truth [variant label('bool05)] .
      endfm,
        eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,
            'M':NzNat]],'_*_['N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .,
        eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .)),
    '#_#_#_#[
      lhs(eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .),
      rhs(eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .),
      makeNarrowingCond(
        cond(eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .))],
    qid("#V:" +
      string(
        getKind(
        fmod 'NAT-ACU is
          nil
          sorts 'Nat ; 'NzNat ; 'Truth ; 'Zero .
          subsort 'NzNat < 'Nat .
          subsort 'Zero < 'Nat .
          op '0 : nil -> 'Zero [ctor] .
          op '1 : nil -> 'NzNat [ctor] .
          op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm] .
          op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm] .
          op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Zero)] .
          op '_+_ : 'NzNat 'NzNat -> 'NzNat [assoc comm ctor id('0.Zero)] .
          op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
          op '_>_ : 'Nat 'Nat -> 'Truth [none] .
          op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
          op '_\_ : 'Nat 'Nat -> 'Nat [none] .
          op '_~_ : 'Nat 'Nat -> 'Truth [comm] .
          op 'd : 'Nat 'Nat -> 'Nat [comm] .
          op 'ff : nil -> 'Truth [ctor] .
          op 'gcd : 'NzNat 'NzNat -> 'NzNat [comm] .
          op 'max : 'Nat 'Nat -> 'Nat [comm] .
          op 'min : 'Nat 'Nat -> 'Nat [comm] .
          op 'p : 'NzNat -> 'Nat [none] .
          op 'quot : 'Nat 'NzNat -> 'Nat [none] .
          op 'tt : nil -> 'Truth [ctor] .
          op '~ : 'Truth -> 'Truth [none] .
          none
          eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,'M':NzNat]],'_*_[
            'N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
          eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat],'X@@@:`[Nat`]] = '_*_['X@@@:`[Nat`],'_+_['_*_['N?:`[Nat`],
            'N':NzNat,'M':NzNat],'_*_['N?:`[Nat`],'N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
          eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant label('bool02)] .
          eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant label('bool01)] .
          eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .
          eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant label('bool03)] .
          eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant label('bool04)] .
          eq '~['ff.Truth] = 'tt.Truth [variant label('bool06)] .
          eq '~['tt.Truth] = 'ff.Truth [variant label('bool05)] .
        endfm,
          leastSort(
          fmod 'NAT-ACU is
            nil
            sorts 'Nat ; 'NzNat ; 'Truth ; 'Zero .
            subsort 'NzNat < 'Nat .
            subsort 'Zero < 'Nat .
            op '0 : nil -> 'Zero [ctor] .
            op '1 : nil -> 'NzNat [ctor] .
            op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm] .
            op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm] .
            op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Zero)] .
            op '_+_ : 'NzNat 'NzNat -> 'NzNat [assoc comm ctor id('0.Zero)] .
            op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
            op '_>_ : 'Nat 'Nat -> 'Truth [none] .
            op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
            op '_\_ : 'Nat 'Nat -> 'Nat [none] .
            op '_~_ : 'Nat 'Nat -> 'Truth [comm] .
            op 'd : 'Nat 'Nat -> 'Nat [comm] .
            op 'ff : nil -> 'Truth [ctor] .
            op 'gcd : 'NzNat 'NzNat -> 'NzNat [comm] .
            op 'max : 'Nat 'Nat -> 'Nat [comm] .
            op 'min : 'Nat 'Nat -> 'Nat [comm] .
            op 'p : 'NzNat -> 'Nat [none] .
            op 'quot : 'Nat 'NzNat -> 'Nat [none] .
            op 'tt : nil -> 'Truth [ctor] .
            op '~ : 'Truth -> 'Truth [none] .
            none
            eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat]] = '_+_['_*_['N?:`[Nat`],'_*_['N':NzNat,'M':NzNat]],'_*_[
              'N?:`[Nat`],'_*_['N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
            eq '_*_['N?:`[Nat`],'N':NzNat,'_+_['M':NzNat,'K':NzNat],'X@@@:`[Nat`]] = '_*_['X@@@:`[Nat`],'_+_['_*_['N?:`[Nat`],
              'N':NzNat,'M':NzNat],'_*_['N?:`[Nat`],'N':NzNat,'K':NzNat]]] [label('nat-acu09)] .
            eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant label('bool02)] .
            eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant label('bool01)] .
            eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .
            eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant label('bool03)] .
            eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant label('bool04)] .
            eq '~['ff.Truth] = 'tt.Truth [variant label('bool06)] .
            eq '~['tt.Truth] = 'ff.Truth [variant label('bool05)] .
          endfm,
            lhs(eq '_>_['N:Nat,'_+_['N:Nat,'M:Nat]] = 'ff.Truth [variant label('nat-fvp10)] .))))),
    none,
    '+,
    1,
    unbounded,
    unbounded),
  260) .
