*** version of October 31 2018

set include BOOL off .

mod NAT-FVP-R is
  protecting TRUTH-VALUE .
  sorts Nat NzNat Zero .
  subsorts Zero NzNat < Nat .
  op 0 : -> Zero [ctor] .
  op 1 : -> NzNat [ctor] .
  op _+_ : Nat Nat -> Nat [ctor assoc comm id: 0 prec 33] .
  op _+_ : NzNat NzNat -> NzNat [ctor assoc comm id: 0 prec 33] .
  op p : NzNat -> Nat .                             *** predecessor
  op d : Nat Nat -> Nat [comm] .                    *** symmetric difference
  op _\_ : Nat Nat -> Nat .                         *** monus
  op _~_ : Nat Nat -> Bool [comm] .                 *** equality predicate
  op _>_ : Nat Nat -> Bool .

  vars N M : Nat .
  vars N' M' : NzNat .

  rl [NAT-FVP-01]: p(N + 1) => N .
  rl [NAT-FVP-02]: d(N + M, N) => M .
  rl [NAT-FVP-03]: (N + M) \ N => M .
  rl [NAT-FVP-04]: N \ (N + M) => 0 .
  rl [NAT-FVP-05]: N ~ N => true .
  rl [NAT-FVP-06]: (N + M') ~ N => false .
  rl [NAT-FVP-07]: M + N + 1 > N => true .
  rl [NAT-FVP-08]: N > N + M => false .
  rl [NAT-FVP-09]: N' > 0 => true .
endm

mod NAT-ACU-R is
  protecting NAT-FVP-R .
  op quot : Nat NzNat -> Nat .                      *** quotient
  op gcd : NzNat NzNat -> NzNat [comm] .            *** greatest common divisor
  op _*_ : Nat Nat -> Nat [assoc comm prec 31] .
  op _*_ : NzNat NzNat -> NzNat [assoc comm prec 31] .

  vars N M : Nat .
  vars N' M' K' : NzNat .
  var  N? : [Nat] .

  rl [NAT-ACU-01]: quot(N' + M', M') => 1 + quot(N', M')  .
  rl [NAT-ACU-02]: quot(M', M') => 1 .
  rl [NAT-ACU-03]: quot(M, N' + M) => 0 .
  rl [NAT-ACU-04]: gcd(N', N') => N' .
  rl [NAT-ACU-05]: gcd(N' + M', M') => gcd(N', M') .
  rl [NAT-ACU-06]: N? * 0 => 0 .
  rl [NAT-ACU-07]: N? * 1 => N? .
  rl [NAT-ACU-08]: N' * (M' + K') => (N' * M') + (N' * K') .
endm

mod INT-FVP-R is
  protecting NAT-FVP-R .
  sorts NzNeg NzInt Int .
  subsorts Nat NzNeg < Int .
  subsorts NzNat NzNeg < NzInt < Int .
  op -_ : NzNat -> NzNeg [ctor] .
  op -_ : NzNeg -> NzNat [ctor] .
  op -_ : Int -> Int .
  op -_ : NzInt -> NzInt .
  op _+_ : Int Int -> Int [assoc comm id: 0 prec 33] .
  op |_| : Int -> Nat .                             *** absolute value
  op |_| : NzInt -> NzNat .
  op p : Int -> Int .                               *** predecessor
  op _~_ : Int Int -> Bool [comm] .                 *** equality predicate
  op _>_ : Int Int -> Bool .

  vars N' M' : NzNat .
  var  N : Nat .
  var  I' : NzInt .
  var  I : Int .

  rl [INT-FVP-01]: - 0 => 0 .
  rl [INT-FVP-02]: - - N' => N' .
  rl [INT-FVP-03]: | N | => N .
  rl [INT-FVP-04]: | - N' | => N' .
  rl [INT-FVP-05]: p(0) => - 1 .
  rl [INT-FVP-06]: p(- N') => -(N' + 1) .
  rl [INT-FVP-07]: - N' ~ - M' => N' ~ M' .
  rl [INT-FVP-08]: - N' ~ N => false .
  rl [INT-FVP-09]: - N' > - M' => M' > N' .
  rl [INT-FVP-10]: - N' > N => false .
  rl [INT-FVP-11]: N > - N' => true .
endm

mod INT-ACU-R is
  protecting INT-FVP-R .
  protecting NAT-ACU-R .
  op quot : Int NzInt -> Int .
  op gcd : NzInt NzInt -> NzNat [comm] .
  op _*_ : Int Int -> Int [assoc comm prec 31] .
  op _*_ : NzInt NzInt -> NzInt [assoc comm prec 31] .

  vars I J H : Int .
  vars I' J' H' : NzInt .
  vars N' M' : NzNat .
  var  Q : NzNeg .

  rl [INT-ACU-01]: quot(0, Q) => 0 .
  rl [INT-ACU-02]: quot(- N', M') => - quot(N', M') .
  rl [INT-ACU-03]: quot(N', - M') => - quot(N', M') .
  rl [INT-ACU-04]: quot(- N', - M') => quot(N', M') .
  rl [INT-ACU-05]: gcd(- N', I') => gcd(N', I') .
  rl [INT-ACU-06]: N' * - M' => - (N' * M') .
  rl [INT-ACU-07]: - N' * - M' => N' * M' .
  rl [INT-ACU-08]: - N' + - M' => - (N' + M') .
  rl [INT-ACU-09]: - (N' + - M') => - N' + M' .
  rl [INT-ACU-10]: - (N' + M') + M' => - N' .
  rl [INT-ACU-11]: N' + - N' => 0 .
endm

mod RAT-ACU-R is
  protecting INT-ACU-R .

  sorts Rat NzRat PosRat NzPosRat .
  subsort Int < Rat .
  subsorts Nat NzPosRat < PosRat < Rat .
  subsorts NzInt < NzRat < Rat .
  subsorts NzNat < NzPosRat < NzRat PosRat .
  op _/_ : NzRat NzRat -> NzRat [prec 31] .         *** division
  op _/_ : NzInt NzNat -> NzRat [ctor prec 31] .
  op _/_ : NzNat NzNat -> NzPosRat [ctor prec 31] .
  op -_ : Rat -> Rat .
  op _+_ : Rat Rat -> Rat [assoc comm id: 0 prec 33] .
  op _+_ : PosRat PosRat -> PosRat [assoc comm id: 0 prec 33] .
  op _*_ : Rat Rat -> Rat [assoc comm prec 31] .
  op _*_ : NzRat NzRat -> NzRat [assoc comm prec 31] .
  op |_| : Rat -> PosRat .                          *** absolute value
  op _~_ : Rat Rat -> Bool [comm] .                 *** equality predicate
  op _>_ : Rat Rat -> Bool .

  ----
  sort Prop .
  op tt : -> Prop [ctor] .
  op join : [Rat] [Rat] -> Prop .
  op join : [Bool] [Bool] -> Prop .

  rl join(R:[Rat], R:[Rat]) => tt .
  rl join(R:[Bool], R:[Bool]) => tt .
  ----

  vars I' J' : NzInt .
  vars R' S' : NzRat .
  vars N' M' O' P' : NzNat .
  vars R : Rat .
  vars I J : Int .

  rl [RAT-ACU-01]: 0 / N' => 0 .
  rl [RAT-ACU-02]: N' / N' => 1 .
  rl [RAT-ACU-03]: - N' / N' => - 1 .
  rl [RAT-ACU-04]: R / 1 => R .
  crl [RAT-ACU-05]: J' / M' => quot(J',gcd(J',M')) / quot(M',gcd(J',M'))
     if join(gcd(J',M') > 1, true) => tt .        *** canonical form of fraction
  rl [RAT-ACU-06]: I' / - N' => - I' / N' .
  rl [RAT-ACU-07]: I' / (J' / M') => (I' * M') / J' .
  rl [RAT-ACU-08]: (I' / N') / M' => I' / (N' * M') .
  rl [RAT-ACU-09]: (I' / N') / (J' / M') => (I' * M') / (N' * J') .
  rl [RAT-ACU-10]: -(I' / N') => -(I') / N' .

  rl [RAT-ACU-11]: (I' / N') * 0 => 0 .
  rl [RAT-ACU-12]: (I' / N') * J' => (I' * J') / N' .
  rl [RAT-ACU-13]: (I' / N') * (J' / M') => (I' * J') / (N' * M') .

  rl [RAT-ACU-14]: | I' / N' | => | I' | / N' .

  rl [RAT-ACU-15]: (I' / N') ~ J' => I' ~ (J' * N') .
  rl [RAT-ACU-16]: (I' / N') ~ (J' / M') => (I' * M') ~ (J' * N') .
  rl [RAT-ACU-17]: 0 ~ R' => false .

  rl [RAT-ACU-18]: I' > (J' / M') => (I' * M') > J' .
  rl [RAT-ACU-19]: (I' / N') > J' => I' > (J' * N') .
  rl [RAT-ACU-20]: (I' / N') > (J' / M') => (I' * M') > (J' * N') .
  rl [RAT-ACU-21]: N' / M' > 0 => true .
  rl [RAT-ACU-22]: - N' / M' > 0 => false .
  rl [RAT-ACU-23]: 0 > N' / M' => false .
  rl [RAT-ACU-24]: 0 > - N' / M' => true .

  rl [RAT-ACU-25]: J' + (I / N') => ((J' * N') + I) / N' .
  rl [RAT-ACU-26]: (I / N') + (J / M') => ((I * M') + (J * N')) / (N' * M') .
endm

set include BOOL on .
