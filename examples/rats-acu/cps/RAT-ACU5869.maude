----  cp RAT-ACU5869 for INT-ACU-10 and RAT-ACU-26
----    (@2:NzNat * @3:Int + @4:NzNat *(@1:Int + -(@2:NzNat * @5:NzNat)))/ @2:NzNat
----    * @4:NzNat
----    =(-(@2:NzNat * @4:NzNat * @5:NzNat)+ @2:NzNat * @3:Int + @4:NzNat *
----    @1:Int)/ @2:NzNat * @4:NzNat .
----
----  By the Ctx rule it suffices to prove:
----    @4:NzNat *(@1:Int + -(@2:NzNat * @5:NzNat))
----    =-(@2:NzNat * @4:NzNat * @5:NzNat)+ @4:NzNat * @1:Int

mod RAT-ACU5869 is
  pr RAT-ACU-R .

  vars X1 I J : Int .
  vars X2 X4 X5 N' M' : NzNat .
  vars I' J' : NzInt .

  rl I * (I' + J') => (I * I') + (I * J') .
endm

----  search [1] join(X4 * (X1 + - (X2 * X5)), - (X2 * X4 * X5) + X1 * X4) =>* tt .

----  Let us use the CtorCases rule on X1, of sort Int, with generating set {0, I':NzInt}.

search [1] join(X4 * (0 + - (X2 * X5)), - (X2 * X4 * X5) + 0 * X4) =>* tt .
search [1] join(X4 * (I' + - (X2 * X5)), - (X2 * X4 * X5) + I' * X4) =>* tt .
