----  cp RAT-ACU6239 for RAT-ACU-02 and RAT-ACU-09
----    @2:[Rat]+ @4:NzNat / @3:NzInt
----    = @2:[Rat]+(@1:NzNat * @4:NzNat)/ @1:NzNat * @3:NzInt .
----
----  By the Ctx rule it suffices to prove:
----   @4:NzNat / @3:NzInt
----    = (@1:NzNat * @4:NzNat)/ @1:NzNat * @3:NzInt

mod RAT-ACU6239 is
  pr RAT-ACU-R .

  vars I J : Int .
  vars X1 X4 N' M' : NzNat .
  vars X3 I' J' K' : NzInt .

  rl gcd(N' * I, N' * J) => N' * gcd(I, J) .
  rl quot(I' * I, I' * J') => quot(I, J') .
  rl quot(I' * I, I') => I .
  rl 1 + N' > 1 => true .
 crl N' * M' > 1 => true if N' > 1 => true .
 crl J / J' => quot(J, gcd(J, J')) / quot(J', gcd(J, J'))
     if join(gcd(J, J') > 1, true) => tt .
endm

----  search [1] in RAT-ACU6239 : join(X4 / X3, X1 * X4 / X1 * X3) =>* tt .

----  We apply CtorCases on X1, of sort NzNat, with generating set {1, 1 + NzNat}.

search [1] in RAT-ACU6239 : join(X4 / X3, (1 * X4) / (1 * X3)) =>* tt .
----  search [1] in RAT-ACU6239 : join(X4 / X3, ((1 + N') * X4) / ((1 + N') * X3)) =>* tt .

----  Two cases: gcd(X4, X3) = 1 and gcd(X4, X3) > 1

mod RAT-ACU6239-1 is
  pr RAT-ACU6239 .
  op x3 : -> NzInt .
  op x4 : -> NzNat .
  rl gcd(x3, x4) => 1 .
  var N' : NzNat .
endm

mod RAT-ACU6239-2 is
  pr RAT-ACU6239 .
  op x3 : -> NzInt .
  op x4 : -> NzNat .
  rl gcd(x3, x4) > 1 => true .
  var N' : NzNat .
endm

search [1] in RAT-ACU6239-1 : join(x4 / x3, ((1 + N') * x4) / ((1 + N') * x3)) =>* tt .
search [1] in RAT-ACU6239-2 : join(x4 / x3, ((1 + N') * x4) / ((1 + N') * x3)) =>* tt .
