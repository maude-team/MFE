----  cp RAT-ACU6106 for INT-ACU-08 and RAT-ACU-26
----    (@4:NzNat * @5:Int + @6:NzNat *(@3:Int + -(@1:NzNat * @4:NzNat + @2:NzNat *
----    @4:NzNat)))/ @4:NzNat * @6:NzNat
----    =(-(@1:NzNat * @4:NzNat * @6:NzNat + @2:NzNat * @4:NzNat * @6:NzNat)+
----    @4:NzNat * @5:Int + @6:NzNat * @3:Int)/ @4:NzNat * @6:NzNat .
----
----  By the Ctx rule it suffices to prove:
----    @6:NzNat *(@3:Int + -(@1:NzNat * @4:NzNat + @2:NzNat * @4:NzNat))
----    =-(@1:NzNat * @4:NzNat * @6:NzNat + @2:NzNat * @4:NzNat * @6:NzNat)+ @6:NzNat * @3:Int

mod RAT-ACU6106 is
  pr RAT-ACU-R .

  vars X3 I J : Int .
  vars X1 X2 X4 X6 N' M' : NzNat .
  vars I' J' : NzInt .

  rl I * (I' + J') => (I * I') + (I * J') .
endm

----  search [1] join(X6 * (X3 + - (X1 * X4 + X2 * X4)), - (X1 * X4 * X6 + X2 * X4 * X6) + X6 * X3) =>* tt .

----  Ctor cases on X3

search [1] join(X6 * (0 + - (X1 * X4 + X2 * X4)), - (X1 * X4 * X6 + X2 * X4 * X6) + X6 * 0) =>* tt .
search [1] join(X6 * (I' + - (X1 * X4 + X2 * X4)), - (X1 * X4 * X6 + X2 * X4 * X6) + X6 * I') =>* tt .
