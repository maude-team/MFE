----  cp RAT-ACU1845 for RAT-ACU-03 and RAT-ACU-26
----    (@1:Int + - @2:NzNat)/ @2:NzNat
----    =(-(@2:NzNat * @3:NzNat)+ @3:NzNat * @1:Int)/ @2:NzNat * @3:NzNat .

----  We have to prove (- (N' * M') + N' * I) / (N' * M') \|/ (- M' + I) / M'
----
----  This proof obligation can be dealt with by using the CtorCases rule on I,
----  with generating set {0, I':NzInt}.

----  1) (- (N' * M') + N' * 0) / (N' * M') \|/ (- M' + 0) / M'
----  2) (- (N' * M') + N' * I') / (N' * M') \|/ (- M' + I') / M'
----
----  1) (- (N' * M') + N' * 0) / (N' * M') \|/ (- M' + 0) / M'

search [1] in RAT-ACU-R : join((- (N' * M') + N' * 0) / (N' * M'), (- M' + 0) / M') =>* tt .


----  2) (- (N' * M') + N' * I') / (N' * M') \|/ (- M' + I') / M'
----
----  This proof obligation can be dealt with by using the CtorCases rule on N',
----  with generating set {1, 1 + N':NzNat}.
----
----  2.a) (- (1 * M') + 1 * I') / (1 * M') \|/ (- M' + I') / M'
----  2.b) (- ((1 + N') * M') + (1 + N') * I') / ((1 + N') * M') \|/ (- M' + I') / M'

----  2.a) (- (1 * M') + 1 * I') / (1 * M') \|/ (- M' + I') / M'

search [1] in RAT-ACU-R : join((- (1 * M') + 1 * I') / (1 * M'), (- M' + I') / M') =>* tt .


----  2.b) (- ((1 + N') * M') + (1 + N') * I') / ((1 + N') * M') \|/ (- M' + I') / M'
----
----  we need to consider two cases: 2.b.1) gcd(I', M') = 1 and 2.b.2) gcd(I', M') > 1
----
----  2.b.1) gcd(I', M') = 1

mod RAT-ACU-R-1 is
  pr RAT-ACU-R .
  op i' : -> NzInt .
  op m' : -> NzNat .
  rl gcd(i', m') => 1 .

  vars R : Rat .
  vars R' : NzRat .
  vars I J K : Int .
  vars I' J' : NzInt .
  vars N' M' O' : NzNat .
endm

search [1] in RAT-ACU-R-1 : join((- ((1 + N') * m') + (1 + N') * i') / ((1 + N') * m'), (- m' + i') / m') =>* tt .

search [1] in RAT-ACU-R-1 : (- ((1 + N') * m') + (1 + N') * i') / ((1 + N') * m')
  =>* ((1 + N') * (- m' + i')) / ((1 + N') * m') .
search [1] in RAT-ACU-R-1 : gcd(((1 + N') * (- m' + i')), ((1 + N') * m')) > 1 =>* true .
search [1] in RAT-ACU-R-1 : (- ((1 + N') * m') + (1 + N') * i') / ((1 + N') * m')
  =>* quot((- ((1 + N') * m') + (1 + N') * i'), (1 + N')) / m' .

----  2.b.2) gcd(I', M') > 1

mod RAT-ACU-R-2 is
  pr RAT-ACU-R .
  op i' : -> NzInt .
  op m' : -> NzNat .
  rl gcd(i', m') > 1 => true .

  vars R : Rat .
  vars R' : NzRat .
  vars I J K : Int .
  vars I' J' : NzInt .
  vars N' M' O' : NzNat .
endm

search [1] in RAT-ACU-R-1 : join((- ((1 + N') * m') + (1 + N') * i') / ((1 + N') * m'), (- m' + i') / m') =>* tt .
