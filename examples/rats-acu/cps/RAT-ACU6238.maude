----  cp RAT-ACU6238 for RAT-ACU-02 and RAT-ACU-08
----    @2:[Rat]+ 1 / @3:NzInt
----    = @2:[Rat]+ @1:NzNat / @1:NzNat * @3:NzInt .
----
----  By the Ctx rule it suffices to prove:
----   1 / @3:NzInt
----    = @1:NzNat / @1:NzNat * @3:NzInt

mod RAT-ACU6238 is
  pr RAT-ACU-R .

  vars I J : Int .
  vars X1 N' M' : NzNat .
  vars X3 I' J' K' : NzInt .

  rl gcd(N', N' * I') => N' .
  rl quot(I' * I, I') => I .
  rl 1 + N' > 1 => true .
  crl J / J' => quot(J, gcd(J, J')) / quot(J', gcd(J, J'))
     if join(gcd(J, J') > 1, true) => tt .
endm

----  search [1] in RAT-ACU6238 : join(1 / X3, X1 / X1 * X3) =>* tt .

----  We apply CtorCases on X1, of sort NzNat, with generating set {1, 1 + NzNat}.

search [1] in RAT-ACU6238 : join(1 / X3, 1 / 1 * X3) =>* tt .
search [1] in RAT-ACU6238 : join(1 / X3, (1 + N') / (1 + N') * X3) =>* tt .
