--------------------------------------------------------------------------------
Lemma                      INT-ACU |- gcd(N', N' * I') = N'
--------------------------------------------------------------------------------

Let us use CtorCases on I', with generating set {N':NzNat, - N':NzNat}.
We have two cases:
a) gcd(N', N' * M') = N'

We do induction on M'

B.C. M' = 1
    gcd(N', N' * 1) = N'
    gcd(N', N' * 1) = gcd(N', N')                          (by NAT-ACU-07)
                     = N'                                  (by NAT-ACU-04)
I.H. gcd(N', N' * M') = N'
I.S. gcd(N', N' * (1 + M')) = N'
    gcd(N', N' * (1 + M')) = gcd(N', N' * 1 + N' * M')     (by NAT-ACU-08)
                           = gcd(N', N' + N' * M')         (by NAT-ACU-07)
                           (N' * M' : NzNat)
                           = gcd(N', N' * M')              (by NAT-ACU-05)
                           = N'                            (by I.H.)

b) gcd(N', N' * - M') = N'
   gcd(N', N' * - M') = gcd(N', - (N' * M'))               (by INT-ACU-06)
                      = gcd(N', N' * M')                   (by NAT-ACU-05)
                      = N'                                 (by a))
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Lemma                      INT-ACU |- quot(N' * M', N') = M'
--------------------------------------------------------------------------------

We do induction on M'

B.C. M' = 1
    quot(N' * 1, N') = 1
    quot(N' * 1, N') = quot(N', N')                        (by NAT-ACU-07)
                     = 1                                   (by NAT-ACU-02)
I.H. quot(N' * M', N') = M'
I.S. quot(N' * (1 + M'), N') = 1 + M'
    quot(N' * (1 + M'), N') = quot(N' * 1 + N' * M'), N')  (by NAT-ACU-08)
                            = quot(N' + N' * M', N')       (by NAT-ACU-07)
                            (N' * M' : NzNat)
                            = 1 + quot(N' * M', N')        (by NAT-ACU-01)
                            = 1 + M'                       (by I.H.)

--------------------------------------------------------------------------------


mod RAT-ACU-R is
  pr RAT-ACU .

endm

eof

  vars R : Rat .
  vars R' : NzRat .
  vars I J K : Int .
  vars I' J' K' : NzInt .
  vars N' M' O' P' : NzNat .

  rl I * (I' + J') => (I * I') + (I * J') .
  rl gcd(N' * I, N' * J) => N' * gcd(I, J) .
  rl gcd(I', I' * J') => I' .
  rl gcd(J + N' * I, N') => gcd(J, N') .
  rl gcd(I + M', M') => gcd(I, M') .
  rl gcd(I' + M', M') => gcd(I', M') .
  rl gcd(I', 1) => 1 .

  rl quot(I' * I, I' * J') => quot(I, J') .
  rl quot(I' * I, I') => I .
  rl quot(I, 1) => I .
  rl 1 + N' > 1 => true .
 crl N' * M' > 1 => true if N' > 1 => true .
  rl - (- N' + - M') => N' + M' .

  rl (I * I') + (J * I') => I' * (I + J) .
  rl (I * I') + I' => I' * (1 + I) .
  rl (I * I') + - I' => - I' * (- 1 + I) .
  rl quot(I' + M', M') => 1 + quot(I', M')  .
  rl quot(- I', N') => - quot(I', N') .
  rl quot(N', - I') => - quot(N', I') .
----  rl - N' + M' => - (N' + - M') .
----  rl - (N' * M') => - N' * M' .
  rl - N' => - 1 * N' .
  rl I * - J => - (I * J) .
  rl I' * N' > J' * N' => I' > J' .
  rl I' * N' > N' => I' > 1 .
  rl N' > J' * N' => 1 > J' .
  rl I' * N' ~ J' * N' => I' ~ J' .
  rl I' * N' ~ N' => I' ~ 1 .
  rl N' ~ J' * N' => 1 ~ J' .
  crl J / J' => quot(J, gcd(J, J')) / quot(J', gcd(J, J'))
     if join(gcd(J, J') > 1, true) => tt .

  rl I / - N' => - I / N' .

  rl gcd(- J', I') => gcd(J', I') .
search [1] in RAT-ACU : (- 1 + 1 * I') / 1 =>* I' + - 1 .
search [1] in RAT-ACU-R : (- 1 + 1 * I') / 1 =>* I' + - 1 .
