----  cp RAT-ACU1766 for RAT-ACU-03 and RAT-ACU-25
----    @2:NzInt + - 1
----    =(- @1:NzNat + @1:NzNat * @2:NzInt)/ @1:NzNat .

mod RAT-ACU1766 is
  pr RAT-ACU-R .

  vars I J : Int .
  vars X1 N' M' : NzNat .
  vars X2 I' J' : NzInt .

  rl (I * I') + - I' => I' * (- 1 + I) .
  rl gcd(N', N' * I') => N' .
  rl quot(I' * I, I') => I .
endm

---- search [1] in RAT-ACU1766 : join(X2 + - 1, (- X1 + X1 * X2) / X1) =>* tt .

---- ctor cases on X2: {N':NzNat, - N':NzNat}

---- search [1] in RAT-ACU1766 : join(N' + - 1, (- X1 + X1 * N') / X1) =>* tt .
---- search [1] in RAT-ACU1766 : join(- N' + - 1, (- X1 + X1 * - N') / X1) =>* tt .

---- ctor cases on N': {1, 1 + N':NzNat}

---- search [1] in RAT-ACU1766 : join(1 + - 1, (- X1 + X1 * 1) / X1) =>* tt .
---- search [1] in RAT-ACU1766 : join((1 + N') + - 1, (- X1 + X1 * (1 + N')) / X1) =>* tt .
---- search [1] in RAT-ACU1766 : join(- 1 + - 1, (- X1 + X1 * - 1) / X1) =>* tt .
---- search [1] in RAT-ACU1766 : join(- (1 + N') + - 1, (- X1 + X1 * - (1 + N')) / X1) =>* tt .

----  the first one can be proven directly,

search [1] in RAT-ACU1766 : join(1 + - 1, (- X1 + X1 * 1) / X1) =>* tt .

----  for the other three we need to consider two cases: X1 = 1 and X1 > 1
----
----  1) X1 = 1

mod RAT-ACU1766-1 is
  pr RAT-ACU1766 .

  ops x1 : -> NzNat .
  rl x1 => 1 .

  vars N' : NzNat .
endm

search [1] in RAT-ACU1766-1 : join((1 + N') + - 1, (- x1 + x1 * (1 + N')) / x1) =>* tt .
search [1] in RAT-ACU1766-1 : join(- 1 + - 1, (- x1 + x1 * - 1) / x1) =>* tt .
search [1] in RAT-ACU1766-1 : join(- (1 + N') + - 1, (- x1 + x1 * - (1 + N')) / x1) =>* tt .

----  2) X1 > 1

mod RAT-ACU1766-2 is
  pr RAT-ACU1766 .

  ops x1 : -> NzNat .
  rl x1 > 1 => true .

  vars N' : NzNat .
  vars I J : Int .
endm

search [1] in RAT-ACU1766-2 : join((1 + N') + - 1, (- x1 + x1 * (1 + N')) / x1) =>* tt .
search [1] in RAT-ACU1766-2 : join(- 1 + - 1, (- x1 + x1 * - 1) / x1) =>* tt .
search [1] in RAT-ACU1766-2 : join(- (1 + N') + - 1, (- x1 + x1 * - (1 + N')) / x1) =>* tt .
