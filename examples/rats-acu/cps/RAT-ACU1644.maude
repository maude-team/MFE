----  cp RAT-ACU1644 for RAT-ACU-02 and RAT-ACU-26
----    (@2:NzNat + @1:Int)/ @2:NzNat
----    =(@2:NzNat * @3:NzNat + @3:NzNat * @1:Int)/ @2:NzNat * @3:NzNat .

----  We have to prove (N' * M' + N' * I) / (N' * M') \|/ (M' + I) / M'
----
----  This proof obligation can be dealt with by using the CtorCases rule on I,
----  with generating set {0, I':NzInt}.

----  1) (N' * M' + N' * 0) / (N' * M') \|/ (M' + 0) / M'
----  2) (N' * M' + N' * I') / (N' * M') \|/ (M' + I') / M'
----
----  1) (N' * M' + N' * 0) / (N' * M') \|/ (M' + 0) / M'

search [1] in RAT-ACU-R : join((N' * M' + N' * 0) / (N' * M'), (M' + 0) / M') =>* tt .

----  Solution 1 (state 6)
----  states: 7  rewrites: 139 in 1ms cpu (1ms real) (104432 rewrites/second)
----  empty substitution

----  2) (N' * M' + N' * I') / (N' * M') \|/ (M' + I') / M'
----
----  This proof obligation can be dealt with by using the CtorCases rule on N',
----  with generating set {1, 1 + N':NzNat}.
----
----  2.a) (1 * M' + 1 * I') / (1 * M') \|/ (M' + I') / M'
----  2.b) ((1 + N') * M' + (1 + N') * I') / ((1 + N') * M') \|/ (M' + I') / M'

----  2.a) (1 * M' + 1 * I') / (1 * M') \|/ (M' + I') / M'

search [1] in RAT-ACU-R : join((1 * M' + 1 * I') / (1 * M'), (M' + I') / M') =>* tt .

----  Solution 1 (state 10)
----  states: 11  rewrites: 228 in 2ms cpu (2ms real) (80707 rewrites/second)
----  empty substitution

----  2.b) ((1 + N') * M' + (1 + N') * I') / ((1 + N') * M') \|/ (M' + I') / M'
----
----  we need to consider two cases: 2.b.1) gcd(I', M') = 1 and 2.b.2) gcd(I', M') > 1
----
----  2.b.1) gcd(I', M') = 1

mod RAT-ACU-R-1 is
  pr RAT-ACU-R .
  op i' : -> NzInt .
  op m' : -> NzNat .
  rl gcd(i', m') => 1 .

  vars R : Rat .
  vars R' : NzRat .
  vars I J K : Int .
  vars I' J' : NzInt .
  vars N' M' O' : NzNat .
endm

search [1] in RAT-ACU-R-1 : join(((1 + N') * m' + (1 + N') * i') / ((1 + N') * m'), (m' + i') / m') =>* tt .

----  Solution 1 (state 230677)
----  states: 230678  rewrites: 4869777 in 57027ms cpu (57416ms real) (85393 rewrites/second)
----  empty substitution

----  2.b.2) gcd(I', M') > 1

mod RAT-ACU-R-2 is
  pr RAT-ACU-R .
  op i' : -> NzInt .
  op m' : -> NzNat .
  rl gcd(i', m') > 1 => true .

  vars R : Rat .
  vars R' : NzRat .
  vars I J K : Int .
  vars I' J' : NzInt .
  vars N' M' O' : NzNat .
endm

search [1] in RAT-ACU-R-1 : join(((1 + N') * m' + (1 + N') * i') / ((1 + N') * m'), (m' + i') / m') =>* tt .

----  Solution 1 (state 230677)
----  states: 230678  rewrites: 4869777 in 60366ms cpu (60709ms real) (80670 rewrites/second)
----  empty substitution
