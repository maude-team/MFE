----   cp RAT-ACU1174 for INT-ACU-09 and RAT-ACU-19
----    @7:[Rat]+(@3:NzNat *(@4:Int + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(@2:Int + @1:NzNat * @3:NzNat))/
----    @3:NzNat * @5:NzNat
----    = @7:[Rat]+(-(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * @4:Int + @5:NzNat * @2:Int + @1:NzNat *
----    @3:NzNat * @5:NzNat)/ @3:NzNat * @5:NzNat .

load RAT-ACU-R.maude

search
  join(
    @7:[Rat]+(@3:NzNat *(@4:Int + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(@2:Int + @1:NzNat * @3:NzNat)) / @3:NzNat * @5:NzNat,
    @7:[Rat]+(-(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * @4:Int + @5:NzNat * @2:Int + @1:NzNat * @3:NzNat * @5:NzNat)/ @3:NzNat * @5:NzNat
  )
  =>* tt .

---- By the Ctx rule it suffices to prove:

search
  join(
    @3:NzNat *(@4:Int + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(@2:Int + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * @4:Int + @5:NzNat * @2:Int + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- This proof obligation can be dealt with by using the CtorCases rule on @2 and @4, of sort Int, with generating set {0, N':NzNat, - N':NzNat}.

---- @4:Int = 0
---- @2:Int = 0

search
  join(
    @3:NzNat *(0 + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(0 + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * 0 + @5:NzNat * 0 + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = 0
---- @2:Int = N':NzNat

search
  join(
    @3:NzNat *(0 + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(N':NzNat + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * 0 + @5:NzNat * N':NzNat + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = 0
---- @2:Int = - N':NzNat

search
  join(
    @3:NzNat *(0 + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(- N':NzNat + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * 0 + @5:NzNat * - N':NzNat + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = N':NzNat
---- @2:Int = 0

search
  join(
    @3:NzNat *(N':NzNat + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(0 + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * N':NzNat + @5:NzNat * 0 + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = N':NzNat
---- @2:Int = M':NzNat

search
  join(
    @3:NzNat *(N':NzNat + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(M':NzNat + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * N':NzNat + @5:NzNat * M':NzNat + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = N':NzNat
---- @2:Int = - M':NzNat

search
  join(
    @3:NzNat *(N':NzNat + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(- M':NzNat + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * N':NzNat + @5:NzNat * - M':NzNat + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = - N':NzNat
---- @2:Int = 0

search
  join(
    @3:NzNat *(- N':NzNat + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(0 + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * - N':NzNat + @5:NzNat * 0 + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = - N':NzNat
---- @2:Int = M':NzNat

search
  join(
    @3:NzNat *(- N':NzNat + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(M':NzNat + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * - N':NzNat + @5:NzNat * M':NzNat + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .

---- @4:Int = - N':NzNat
---- @2:Int = - M':NzNat

search
  join(
    @3:NzNat *(- N':NzNat + -(@5:NzNat * @6:NzNat))+ @5:NzNat *(- M':NzNat + @1:NzNat * @3:NzNat),
    -(@3:NzNat * @5:NzNat * @6:NzNat)+ @3:NzNat * - N':NzNat + @5:NzNat * - M':NzNat + @1:NzNat * @3:NzNat * @5:NzNat
  )
  =>* tt .
