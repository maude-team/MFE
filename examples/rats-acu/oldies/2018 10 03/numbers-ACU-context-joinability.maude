---(
ccp RAT-ACU7797 for RAT-ACU-01 and RAT-ACU-07
  -(quot(@1:NzInt,gcd(@2:NzNat,@1:NzInt))/ quot(@2:NzNat,gcd(@2:NzNat,@1:NzInt)))
  = - @1:NzInt / @2:NzNat
  if gcd(@1:NzInt,@2:NzNat)> 1 = tt .
---)

fmod CJ is
  protecting RAT-ACU .

  op @2 : -> NzNat .
  ops @1 @3 : -> NzInt .
  vars I' J' K' : NzInt .
  vars M' N' : NzNat .
  vars I J : Int .

  ---- context
  eq gcd(@1, @2) > 1 = tt .
  ---- lemmas
  ----ceq gcd(- I', J') > 1 = tt if gcd(I', J') > 1 = tt .
  eq [INT-ACU-05']: gcd(- J', I') = gcd(J', I') .
  eq [INT-ACU-02']: quot(- I', M') = - quot(I', M') .
  ----eq [RAT-ACU-07']: - (I / J) = - I / J .
  ----eq [RAT-ACU-07]: - (I' / J') = - I' / J' .
  mb quot(I', gcd(N', I')) : NzInt .
  mb quot(M', gcd(I', M')) : NzNat .
endfm

red - @1 / @2 .
---- result [Rat]: - quot(@1, gcd(@2, @1)) / quot(@2, gcd(@2, @1))
red -(quot(@1,gcd(@2,@1))/ quot(@2,gcd(@2,@1))) .
---- result [Rat]: - quot(@1, gcd(@2, @1)) / quot(@2, gcd(@2, @1))
