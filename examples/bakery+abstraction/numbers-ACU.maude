
set include BOOL off .

fmod BOOL-FVP is
  sort Truth .
  ops tt ff : -> Truth [ctor] .
  op _/\_ : Truth Truth -> Truth .
  op _\/_ : Truth Truth -> Truth .
  op ~ : Truth -> Truth .
  vars B X Y Z : Truth .
  eq tt /\ B = B  [variant] .
  eq ff /\ B = ff [variant] .
  eq ff \/ B = B  [variant] .
  eq tt \/ B = tt [variant] .
  eq ~(tt) = ff [variant] .
  eq ~(ff) = tt [variant] .
endfm

fmod NAT-FVP is  protecting BOOL-FVP .
  sorts Nat NzNat Zero .
  subsorts Zero NzNat < Nat .
  op 0 : -> Zero [ctor] .
  op 1 : -> NzNat [ctor] .
  op _+_ : Nat Nat -> Nat [ctor assoc comm id: 0] .
  op _+_ : NzNat NzNat -> NzNat [ctor assoc comm id: 0] .  
  op p : NzNat -> Nat .                *** predecessor
  op max : Nat Nat -> Nat [comm] .
  op min : Nat Nat -> Nat [comm] .
  op d : Nat Nat -> Nat [comm] .       *** symmetric difference
  op _\_ : Nat Nat -> Nat .            *** monus
  op _~_ : Nat Nat -> Truth [comm] .   *** equality predicate
  op _>_ : Nat Nat -> Truth .

  vars N M : Nat .   vars N' M' K' : NzNat .

  eq p(N + 1) = N [variant] .
  eq max(N + M,N) = N + M [variant] .
  eq min(N + M,N) = N [variant] .
  eq d(N + M,N) = M [variant] .
  eq (N + M) \ N = M [variant] .
  eq N \ (N + M) = 0 [variant] .  
  eq N ~ N = tt [variant] .
  eq (N + M') ~ N = ff [variant] . 
  eq M + N + 1 > N = tt [variant] .
  eq N > N + M = ff [variant] .
endfm


fmod INT-FVP is protecting NAT-FVP .
  sorts NzNeg NzInt Int .
  subsorts Nat NzNeg < Int .
  subsorts NzNat NzNeg < NzInt < Int .    
  op - : NzNat -> NzNeg [ctor] .
  op - : Int -> Int .  
  op _+_ : Int Int -> Int [assoc comm id: 0] .
  op |_| : Int -> Nat .                *** absolute value
  op p : Int -> Int .                  *** predecessor
  op max : Int Int -> Int [comm] .
  op min : Int Int -> Int [comm] .
  op _~_ : Int Int -> Truth [comm] .   *** equality predicate
  op _>_ : Int Int -> Truth .

  vars I J : Int .   vars I' J' : NzInt .
  vars N' M' : NzNat .  var N : Nat .  var I? : [Int] .

  eq I? + N' + -(N') = I? [variant] .                  *** coherence extension
  eq I? + -(N') + -(M') = I? + -(N' + M') [variant] .  *** coherence extension
  eq I? + N' + -(N' + M') = I? + -(M') [variant] .     *** coherence extension
  eq -(0) = 0 [variant] .
  eq -(-(N')) = N' [variant] .
  eq | N | = N [variant] .
  eq | -(N') | = N' [variant] .
  eq p(0) = -(1) [variant] .
  eq p(-(N')) = -(N' + 1) [variant] .
  eq max(-(N'),-(M')) = -(min(N',M')) [variant] .
  eq max(-(N'),N) = N [variant] .
  eq min(-(N'),-(M')) = -(max(N',M')) [variant] .
  eq min(-(N'),N) = -(N') [variant] .
  eq -(N') ~ -(M') = N' ~ M' [variant] .
  eq -(N') ~ N = ff [variant] .
  eq -(N') > -(M') = M' > N' [variant] .
  eq -(N') > N = ff [variant] .
  eq N > -(N') = tt [variant] .    
endfm


fmod NAT-ACU is  protecting NAT-FVP .
  op quot : Nat NzNat -> Nat .            *** quotient
  op gcd : NzNat NzNat -> NzNat [comm] .  *** greatest common divisor
  op _*_ : Nat Nat -> Nat [assoc comm] .
  op _*_ : NzNat NzNat -> NzNat [assoc comm] .   

  vars N M : Nat .   vars N' M' K' : NzNat .  var N? : [Nat] .

  eq quot((N' + M'),M') = 1 + quot(N',M')  .
  eq quot(M',M') = 1 .
  eq quot(M,(N' + M)) = 0 .
  eq gcd(N',N') = N' .
  eq gcd((N' + M'),M') =  gcd(N',M') .
  eq N? * 0 = 0 .
  eq N? * 1 = N? .
  eq N' * (M' + K') = (N' * M') + (N' * K') .
  eq N? * N' * (M' + K') = (N? * N' * M') + (N? * N' * K') .  *** coherence extension
endfm

fmod INT-ACU is protecting INT-FVP .  protecting NAT-ACU .
  op quot : Int NzInt -> Int .
  op gcd : NzInt NzInt -> NzNat [comm] .
  op _*_ : Int Int -> Int [assoc comm] .
  op _*_ : NzInt NzInt -> NzInt [assoc comm] .
  
  vars I J : Int .   vars I' J' : NzInt .
  vars N' M' K' : NzNat .  var Q : NzNeg .  var I? : [Int] .

  eq quot(0,Q) = 0 .
  eq quot(-(N'),M') = -(quot(N',M')) .
  eq quot(N',-(M')) = -(quot(N',M')) .
  eq quot(-(N'),-(M')) = quot(N',M') .    
  eq gcd(-(N'),I') = gcd(N',I') .
  eq -(M') * -(N') = N' * M' .
  eq I? * -(M') * -(N') = I? * N' * M' .  *** coherence extension  
  eq M' * -(N') = -(N' * M') .
  eq I? * M' * -(N') = I? * -(N' * M') .  *** coherence extension
endfm

fmod RAT-ACU is
  protecting INT-ACU .
  sorts Rat NzRat PosRat NzPosRat .
  subsort Int < Rat .
  subsorts Nat NzPosRat < PosRat < Rat .
  subsorts NzInt < NzRat < Rat .
  subsorts NzNat < NzPosRat < NzRat PosRat .
  op _/_ : NzRat NzRat -> NzRat .       *** division 
  op _/_ : NzInt NzNat -> NzRat [ctor] .
  op _/_ : NzNat NzNat -> NzPosRat [ctor] .    
  op - : Rat -> Rat .
  op _+_ : Rat Rat -> Rat [assoc comm id: 0] .
  op _+_ : PosRat PosRat -> PosRat [assoc comm id: 0] .    
  op _*_ : Rat Rat -> Rat [assoc comm] .
  op _*_ : NzRat NzRat -> NzRat [assoc comm] .
  op |_| : Rat -> PosRat .             *** absolute value
  op max : Rat Rat -> Rat [comm] .
  op min : Rat Rat -> Rat [comm] .
  op _~_ : Rat Rat -> Truth [comm] .   *** equality predicate
  op _>_ : Rat Rat -> Truth .   
  
  vars I' J' : NzInt .   vars R S : Rat .    var R? : [Rat] .
  vars R' S' : NzRat .   vars N' M' K' : NzNat . 

  ceq J' / M' = quot(J',gcd(J',M')) / quot(M',gcd(J',M')) 
     if gcd(J',M') > 1 = tt .                           *** canonical form of fraction
  eq R' / 1 = R' .                                      
  eq I' / -(N') = -(I') / N' .
  eq I' / (J' / M') = (I' * M') / J' .
  eq (I' / N') / J' = I' / (N' * J') .
  eq (I' / N') / (J' / M') = (I' * M') / (N' * J') .  
  eq R? + I' + (J' / M') = R? + (((I' * M') + J') / M') .                      *** coherence extension
  eq R? + (I' / N') + (J' / M') = R? + (((I' * M') + (J' * N')) / (N' * M')) . *** coherence extension  
  eq -(I' / N') = -(I') / N' .
  eq (I' / N') * 0 = 0 .
  eq R? * (I' / N') * 0 = 0 .                                     *** coherence extension
  eq (I' / N') * J' = (I' * J') / N' .
  eq R? * (I' / N') * J' = R? * ((I' * J') / N') .                *** coherence extension
  eq (I' / N') * (J' / M') = (I' * J') / (N' * M') .
  eq R? * (I' / N') * (J' / M') = R? * ((I' * J') / (N' * M')) .  *** coherence extension
  eq | I' / N' | = | I' | / N' .
  eq max(I' / N',J') = max(I',(J' * N')) / N' .
  eq max(I' / N',J' / M') = max((I' * M'),(J' * N')) / (N' * M') .  
  eq min(I' / N',J') = min(I',(J' * N')) / N' .
  eq min(I' / N',J' / M') = min((I' * M'),(J' * N')) / (N' * M') .
  eq (I' / N') ~ J' = I' ~ (J' * N') .
  eq (I' / N') ~ (J' / M') = (I' * M') ~ (J' * N') .    
  eq I' > (J' / M') = (I' * M') > J' .
  eq (I' / N') > J' = I' > (J' * N') .
  eq (I' / N') > J' = I' > (J' * N') .
  eq (I' / N') > (J' / M') = (I' * M') > (J' * N') .  
endfm

