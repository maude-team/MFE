set include BOOL off .

fmod HF-SETS is
  protecting BOOL-OPS .
  sorts Magma Set .
  subsort Set < Magma .
  op _,_ : Magma Magma -> Magma [ctor assoc comm] .
  op {_} : Magma -> Set [ctor] .
  op {} : -> Set [ctor] .

  vars M M' : Magma .
  vars S S' : Set .

  eq [01]: M, M = M .

  op _in_ : Magma Set -> Bool .                    *** set membership
  eq [11]: S in {S} = true .
  eq [12]: S in {} = false .
  eq [13]: {} in {{M}} = false .
  eq [14]: {M} in {{}} = false .
  eq [15]: {M} in {{M'}} = M in {M'} and M' in {M} .
  eq [16]: S in {S', M} = S in {S'} or S in {M} .
  eq [17]: (S, M) in S' = (S in S') and (M in S') .

  op _~_ : Set Set -> Bool .                       *** set equality
  eq [21]: S ~ S' = (S <= S') and (S' <= S) .

  op _<=_ : Set Set -> Bool .                      *** set containment
  eq [31]: {} <= S = true .
  eq [32]: {M} <= S = M in S .

  op _U_ : Set Set -> Set [assoc comm] .           *** union
  eq [41]: S U {} = S .
  eq [42]: {M} U {M'} = {M, M'} .
  eq [43]: S U {M} U {M'} = S U {M, M'} .

  op P : Set -> Set .                             *** powerset
  eq [51]: P({}) = {{}} .
  eq [52]: P({S}) = {{},{S}} .
  eq [53]: P({S, M}) = P({M}) U augment(P({M}), S) .

  op augment : Set Set -> Set .                   *** augmentation
  eq [61]: augment({}, S) = {} .
  eq [62]: augment({S}, S') = {{S'} U S} .
  eq [63]: augment({M, M'}, S) = augment({M}, S) U augment({M'}, S) .

  op _&_ : Set Set -> Set .                       *** intersection
  eq [71]: {} & S = {} .
 ceq [72]: {S} & S' = {S} if S in S' = true .
 ceq [73]: {S} & S' = {} if S in S' = false .
 ceq [74]: {S, M} & S' = {S} U ({M} & S') if S in S' = true .
 ceq [75]: {S, M} & S' = {M} & S' if S in S' = false .

  op <_;_> : Set Set -> Set .                     *** ordered pairs
  op <_;_> : Magma Magma -> Magma .               *** extension to magmas
  eq [91]: < S ; S' > = {S, {S, S'}} .
  eq [92]: < S ; S', M > = {S, {S, S'}}, < S ; M > .
  eq [93]: < S, M ; M' > = < S ; M' >, < M ; M' > .

  op _X_ : Set Set -> Set .                       *** cartesian product
  eq [101]: {} X S = {} .
  eq [102]: S X {} = {} .
  eq [103]: {M} X {M'} = {< M ; M' >} .
endfm
