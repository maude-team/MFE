 set include BOOL off .

  fmod HF-SETS is
    protecting BOOL-OPS .
    sorts Magma Set .
    subsort Set < Magma .
    op _,_ : Magma Magma -> Magma [ctor assoc comm] .
    op {_} : Magma -> Set [ctor] .
    op {} : -> Set [ctor] .

    vars M M' : Magma .              vars S S' T : Set .

 ----   eq M, M, M' = M, M' . ---- the MFE completes for ACU coherence
    eq [01]: M, M = M .

    op _in_ : Magma Set -> Bool .   *** set membership for several elements
    eq [11]: M in {} = false .
    eq [12]: S in {S'} = S ~ S' .
    eq [13]: S in {S', M} = (S ~ S') or (S in {M}) .
    eq [14]: S, M in {M'} = (S in {M'}) and (M in {M'}) .

    op _~_ : Set Set -> Bool .      *** set equality
    eq [21]: S ~ S' = (S <= S') and (S' <= S) .

    op _<=_ : Set Set -> Bool .     *** set containment
    eq [31]: {} <= S = true .
    eq [32]: {M} <= S = M in S .

    op _U_ : Set Set -> Set [assoc comm] .   *** union
    eq [41]: S U {} = S .
    eq [42]: {M} U {M'} = {M,M'} .
    eq [43]: S U {M} U {M'} = S U {M, M'} .
----    eq [15]: T U S U S = T U S . ---- the MFE completes for ACU coherence

    op P : Set -> Set .          *** powerset
    eq [51]: P({}) = {{}} .
    eq [52]: P({S}) = {{},{S}} .
    eq [53]: P({S, M}) = P({M}) U augment(P({M}), S) .

    op augment : Set Set -> Set .
    eq [61]: augment({}, T) = {} .
    eq [62]: augment({S}, T) = {{T} U S} .
    eq [63]: augment({M, M'}, T) = augment({M}, T) U augment({M'}, T) .

    op _&_ : Set Set -> Set .       *** intersection
    eq [71]: {} & S = {} .
   ceq [72]: {S} & S' = {S} if S in S' = true .
   ceq [73]: {S} & S' = {} if S in S' = false .
   ceq [74]: {S, M} & S' = {S} U ({M} & S') if S in S' = true .
   ceq [75]: {S, M} & S' = {M} & S' if S in S' = false .
  endfm

---(
Church-Rosser check for HF-SETS
The following critical pairs must be proved joinable:
  cp HF-SETS100 for 01 and 63
    augment({@1:Magma},@6:Set)U augment({@2:Magma},@6:Set)U augment({@3:Magma},@6:Set)U augment({
    @4:Magma},@6:Set)U augment({@5:Magma},@6:Set)
    = augment({@1:Magma},@6:Set)U augment({@2:Magma},@6:Set)U augment({@2:Magma},@6:Set)U augment({
    @3:Magma},@6:Set)U augment({@4:Magma},@6:Set)U augment({@5:Magma},@6:Set).
  cp HF-SETS4 for 53 and 53
    P({@3:Magma})U augment(P({@3:Magma}),@1:Set)U augment(P({@3:Magma})U augment(P({@3:Magma}),@1:Set),
    @2:Set)
    = P({@3:Magma})U augment(P({@3:Magma}),@2:Set)U augment(P({@3:Magma})U augment(P({@3:Magma}),
    @2:Set),@1:Set).
  cp HF-SETS46 for 01 and 53
    P({@1:Magma})U augment(P({@1:Magma}),@2:Set)
    = P({@1:Magma})U augment(P({@1:Magma}),@2:Set)U augment(P({@1:Magma})U augment(P({@1:Magma}),
    @2:Set),@2:Set).
  cp HF-SETS53 for 01 and 63
    augment({@1:Magma},@2:Set)
    = augment({@1:Magma},@2:Set)U augment({@1:Magma},@2:Set).
  cp HF-SETS54 for 01 and 63
    augment({@1:Magma},@3:Set)U augment({@2:Magma},@3:Set)
    = augment({@1:Magma},@3:Set)U augment({@1:Magma},@3:Set)U augment({@2:Magma},@3:Set).
  cp HF-SETS57 for 01 and 63
    augment({@1:Magma},@4:Set)U augment({@2:Magma},@4:Set)U augment({@3:Magma},@4:Set)
    = augment({@1:Magma},@4:Set)U augment({@2:Magma},@4:Set)U augment({@2:Magma},@4:Set)U augment({
    @3:Magma},@4:Set).
  cp HF-SETS95 for 01 and 63
    augment({@1:Magma},@5:Set)U augment({@2:Magma},@5:Set)U augment({@3:Magma},@5:Set)U augment({
    @4:Magma},@5:Set)
    = augment({@1:Magma},@5:Set)U augment({@1:Magma},@5:Set)U augment({@2:Magma},@5:Set)U augment({
    @3:Magma},@5:Set)U augment({@4:Magma},@5:Set).
	The module is sort-decreasing.
)

---- cp HF-SETS100, for equations 01 and 63, cannot be further reduced because
---- because there is no idempotency equation on sets. Same for cps HF-SETS53,
---- HF-SETS54, HF-SETS57, and HF-SETS95.

fmod HF-SETS-1 is
  pr HF-SETS .
  var S : Set .
  eq [44]: S U S = S .
endfm

---(
rewrites: 914745 in 2708ms cpu (2773ms real) (337776 rewrites/second)
Church-Rosser check for HF-SETS-1
The following critical pairs must be proved joinable:
  cp HF-SETS-1211 for 01 and 53
    P({@1:Magma})U augment(P({@1:Magma}),@2:Set)
    = P({@1:Magma})U augment(P({@1:Magma}),@2:Set)U augment(P({@1:Magma})U augment(P({@1:Magma}),
    @2:Set),@2:Set).
  cp HF-SETS-14 for 53 and 53
    P({@3:Magma})U augment(P({@3:Magma}),@1:Set)U augment(P({@3:Magma})U augment(P({@3:Magma}),@1:Set),
    @2:Set)
    = P({@3:Magma})U augment(P({@3:Magma}),@2:Set)U augment(P({@3:Magma})U augment(P({@3:Magma}),
    @2:Set),@1:Set).
	The module is sort-decreasing.
)

---- cps HF-SETS-1211 and HF-SETS-14 suggest the need of the following equation
----    eq augment(S U S', T) = augment(S, T) U augment(S', T) .

fmod HF-SETS-2 is
  pr HF-SETS-1 .
  vars S S' T : Set .
  eq [64]: augment(S U S', T) = augment(S, T) U augment(S', T) .
endfm

---(
Church-Rosser check for HF-SETS-2
The following critical pairs must be proved joinable:
  cp HF-SETS-2261 for 01 and 53
    P({@1:Magma})U augment(P({@1:Magma}),@2:Set)
    = P({@1:Magma})U augment(P({@1:Magma}),@2:Set)U augment(augment(P({@1:Magma}),@2:Set),@2:Set).
  cp HF-SETS-24 for 53 and 53
    P({@3:Magma})U augment(P({@3:Magma}),@1:Set)U augment(P({@3:Magma}),@2:Set)U augment(augment(P({
    @3:Magma}),@1:Set),@2:Set)
    = P({@3:Magma})U augment(P({@3:Magma}),@1:Set)U augment(P({@3:Magma}),@2:Set)U augment(augment(P({
    @3:Magma}),@2:Set),@1:Set).
	The module is sort-decreasing.
)

---- The first critical pair suggests the need of the equation
----    eq augment(augment(S, T), T) = augment(S, T) .

fmod HF-SETS-3 is
  pr HF-SETS-2 .
  vars S T : Set .
  eq [65]: augment(augment(S, T), T) = augment(S, T) .
endfm

---(
Church-Rosser check for HF-SETS-3
The following critical pairs must be proved joinable:
  cp HF-SETS-34 for 53 and 53
    P({@3:Magma})U augment(P({@3:Magma}),@1:Set)U augment(P({@3:Magma}),@2:Set)U augment(augment(P({
    @3:Magma}),@1:Set),@2:Set)
    = P({@3:Magma})U augment(P({@3:Magma}),@1:Set)U augment(P({@3:Magma}),@2:Set)U augment(augment(P({
    @3:Magma}),@2:Set),@1:Set).
	The module is sort-decreasing.
)

---- We are left with this critical pair, which I don't see how to eliminate.
----
---- The specification seems however ground confluent, which can be proved by showing
---- the following joinability proof obligation
----
----   augment(augment(S, S'), T) \|/  augment(augment(S, T), S')
----
---- By using the chain theorem, once proven this proof obligation, we could conclude
---- the ground confluence of the original specification by proving the joinability
---- of the equations added:
----
---- S U S \|/ S
---- augment(S U S', T) \|/ augment(S, T) U augment(S', T)
---- augment(augment(S, T), T) \|/ augment(S, T)
