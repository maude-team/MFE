  load mint.fm

 (fmod RAT is
    sorts Rat NzRat .
    protecting MINT-2 .
    subsort Int < Rat .
    subsorts NzInt < NzRat < Rat .
    op _/_ : Rat NzRat -> Rat .
    op _/_ : NzRat NzRat -> NzRat .
    op -_  : Rat -> Rat .
    op -_  : NzRat -> NzRat .
    op _+_ : Rat Rat -> Rat [ditto] .
    op _*_ : Rat Rat -> Rat [ditto] .
    op _*_ : NzRat NzRat -> NzRat [ditto] .
    vars I' J' : NzInt .
    vars R S : Rat .
    vars R' S' : NzRat .
    eq  [rat01] : R / (R' / S') = (R * S') / R' .
    eq  [rat02] : (R / R') / S' = R / (R' * S') .
    ceq [rat03] : J' / I'
      = quot(J', gcd(J', I')) / quot(I', gcd(J', I'))
      if gcd(J', I') > s 0 = true .
    eq  [rat04] : R / s 0 = R .
    eq  [rat05] : 0 / R' = 0 .
    eq  [rat06] : R / (- R') = (- R) / R' .
    eq  [rat07] : - (R / R') = (- R) / R' .
    eq  [rat08] : R' + (S / S') = ((R' * S') + S) / S' .
    eq  [rat09] : R * (S / R') = (R * S) / R' .
----    eq  [lemma] : gcd(J':NzInt,s 0) = s 0 .
  endfm)

(select tool CRC .)
(check Church-Rosser .)
eof
---(
rewrites: 43610402 in 431167ms cpu (435953ms real) (101144 rewrites/second)
ccp RAT2539 for rat04 and rat03
  X@@@:[Rat]+ J':NzInt
  = X@@@:[Rat]+(quot(J':NzInt,gcd(J':NzInt,s 0))/ quot(s 0,gcd(J':NzInt,s 0)))
  if gcd(J':NzInt,s 0)> s 0 = true .


Church-Rosser checking of RAT
Checking solution:
The following critical pairs cannot be joined:
  cp for int01 and rat08
    R':NzRat
    =(S':NzRat * R':NzRat)/ S':NzRat .
  cp for rat01 and rat05
    (0 * #3:NzRat)/ #2:NzRat
    = 0 .
  cp for rat01 and rat08
    ((0 * #3:NzRat)+ R':NzRat * #2:NzRat)/ #2:NzRat
    =(R':NzRat * #2:NzRat * #3:NzRat)/ #2:NzRat * #3:NzRat .
  cp for rat01 and rat08
    ((S:Rat * #3:NzRat)+ R':NzRat * #2:NzRat)/ #2:NzRat
    =(#3:NzRat * S:Rat +((R':NzRat * #2:NzRat)/ #3:NzRat))/ #2:NzRat .
  cp for rat02 and rat04
    #1:Rat / #2:NzRat * s 0
    = #1:Rat / #2:NzRat .
  cp for rat02 and rat06
    #1:Rat / #2:NzRat * - R':NzRat
    = - #1:Rat / R':NzRat * #2:NzRat .
  cp for rat04 and rat08
    S:Rat + R':NzRat
    = S:Rat + R':NzRat * s 0 .
  cp for rat05 and rat09
    0 * R:Rat
    =(0 * R:Rat)/ R':NzRat .
  cp for rat06 and rat08
    R':NzRat
    = -(R':NzRat * - #2:NzRat)/ #2:NzRat .
  cp for rat06 and rat08
    (- S:Rat + R':NzRat * #2:NzRat)/ #2:NzRat
    = -(S:Rat + R':NzRat * - #2:NzRat)/ #2:NzRat .
  cp for rat06 and rat09
    (R:Rat * - S:Rat)/ #2:NzRat
    = -(R:Rat * S:Rat)/ #2:NzRat .
  ccp for int05 and int06
    - d(M':NzNat,N':NzNat)
    = d(M':NzNat,N':NzNat)
    if M':NzNat > N':NzNat = true /\ N':NzNat > M':NzNat = true .
  ccp for nat12 and nat14
    s quot(d(N:Nat,M':NzNat),M':NzNat)
    = 0
    if M':NzNat > N:Nat = true /\ N:Nat > M':NzNat = true .
  ccp for nat14 and nat12
    0
    = s quot(d(N:Nat,M':NzNat),M':NzNat)
    if N:Nat > M':NzNat = true /\ M':NzNat > N:Nat = true .
There are non-sort-decreasing equations.
The following proof obligations must be checked:
  cmb quot(J':NzInt,gcd(J':NzInt,I':NzInt))/ quot(I':NzInt,gcd(J':NzInt,
    I':NzInt)): NzRat
    if gcd(J':NzInt,I':NzInt)> s 0 = true .
  cmb quot(J':NzInt,gcd(J':NzInt,I'@NzInt:NzInt))/ quot(I'@NzInt:NzInt,gcd(
    J':NzInt,I'@NzInt:NzInt)): NzRat
    if gcd(J':NzInt,I'@NzInt:NzInt)> s 0 = true .
  cmb quot(J'@NzInt:NzInt,gcd(J'@NzInt:NzInt,I':NzInt))/ quot(I':NzInt,gcd(
    J'@NzInt:NzInt,I':NzInt)): NzRat
    if gcd(J'@NzInt:NzInt,I':NzInt)> s 0 = true .
  cmb quot(J'@NzInt:NzInt,gcd(J'@NzInt:NzInt,I'@NzInt:NzInt))/ quot(
    I'@NzInt:NzInt,gcd(J'@NzInt:NzInt,I'@NzInt:NzInt)): NzRat
    if gcd(J'@NzInt:NzInt,I'@NzInt:NzInt)> s 0 = true .
  cmb gcd(d(N':NzNat,M':NzNat),M':NzNat): NzNat
    if N':NzNat > M':NzNat = true .
---)

 (fmod RAT is
    sorts Rat NzRat .
    protecting MINT-2 .
    subsort Int < Rat .
    subsorts NzInt < NzRat < Rat .
    op _/_ : Rat NzRat -> Rat .
    op _/_ : NzRat NzRat -> NzRat .
    op -_  : Rat -> Rat .
    op -_  : NzRat -> NzRat .
    op _+_ : Rat Rat -> Rat [ditto] .
    op _*_ : Rat Rat -> Rat [ditto] .
    op _*_ : NzRat NzRat -> NzRat [ditto] .
    vars I' J' : NzInt .
    vars R S : Rat .
    vars R' S' : NzRat .
    eq  [rat01] : R / (R' / S') = (R * S') / R' .
    eq  [rat02] : (R / R') / S' = R / (R' * S') .
    ceq [rat03] : J' / I'
      = quot(J', gcd(J', I')) / quot(I', gcd(J', I'))
      if gcd(J', I') > s 0 = true .
    eq  [rat04-1] : R' / s 0 = R' .
    eq  [rat05] : 0 / R' = 0 .
    eq  [rat06] : R / (- R') = (- R) / R' .
    eq  [rat07] : - (R / R') = (- R) / R' .
    eq  [rat08] : R' + (S / S') = ((R' * S') + S) / S' .
    eq  [rat09] : R * (S / R') = (R * S) / R' .
    eq  [rat10] : R * 0 = 0 .
    eq  [rat11] : R * s 0 = R .
    eq  [rat12] : R * - S = - (R * S) .
    eq  [rat13] : - - R = R .
    eq  [rat14] : (S' * R) / S' = R .
    eq  [rat15] : R' / R' = s 0 .
    eq  [rat16] : R / s 0 = R .
----    eq  [rat17] : (R / R') + (S / S') = ((R * S') + (R' * S)) / (R' * S') .
  endfm)

(select tool CRC .)
(check Church-Rosser .)

---(
26e
rewrites:  22181425 in 207911ms cpu (217937ms real) (106687 rewrites/second)
previous
rewrites: 179182687 in 434669ms cpu (468457ms real) (412227 rewrites/second)

Church-Rosser checking of RAT
Checking solution:
The following critical pairs cannot be joined:
  ccp for nat12 and nat14
    s quot(d(N:Nat,M':NzNat),M':NzNat)
    = 0
    if M':NzNat > N:Nat = true /\ N:Nat > M':NzNat = true .
  ccp for nat14 and nat12
    0
    = s quot(d(N:Nat,M':NzNat),M':NzNat)
    if N:Nat > M':NzNat = true /\ M':NzNat > N:Nat = true .
  ccp for rat04-1 and rat03
    J':NzInt
    = quot(J':NzInt,gcd(J':NzInt,s 0))/ quot(s 0,gcd(J':NzInt,s 0))
    if gcd(J':NzInt,s 0)> s 0 = true .
There are non-sort-decreasing equations.
The following proof obligations must be checked:
  cmb quot(J':NzInt,gcd(J':NzInt,I':NzInt))/ quot(I':NzInt,gcd(J':NzInt,
    I':NzInt)): NzRat
    if gcd(J':NzInt,I':NzInt)> s 0 = true .
  cmb quot(J':NzInt,gcd(J':NzInt,I'@NzInt:NzInt))/ quot(I'@NzInt:NzInt,gcd(
    J':NzInt,I'@NzInt:NzInt)): NzRat
    if gcd(J':NzInt,I'@NzInt:NzInt)> s 0 = true .
  cmb quot(J'@NzInt:NzInt,gcd(J'@NzInt:NzInt,I':NzInt))/ quot(I':NzInt,gcd(
    J'@NzInt:NzInt,I':NzInt)): NzRat
    if gcd(J'@NzInt:NzInt,I':NzInt)> s 0 = true .
  cmb quot(J'@NzInt:NzInt,gcd(J'@NzInt:NzInt,I'@NzInt:NzInt))/ quot(
    I'@NzInt:NzInt,gcd(J'@NzInt:NzInt,I'@NzInt:NzInt)): NzRat
    if gcd(J'@NzInt:NzInt,I'@NzInt:NzInt)> s 0 = true .
  cmb gcd(d(N':NzNat,M':NzNat),M':NzNat): NzNat
    if N':NzNat > M':NzNat = true .
---)
