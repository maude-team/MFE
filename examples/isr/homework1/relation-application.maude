fmod RELATION-APPLICATION is protecting RAT .
  sorts Pair NatSet RatSet Rel .
  subsort Pair < Rel .
  subsort Nat < NatSet < RatSet .
  subsort Rat < RatSet .
  op [_,_] : Nat Rat -> Pair [ctor] .       *** Pair is cartesian product Nat x Rat
  op mt : -> NatSet [ctor] .                *** empty set of naturals
  op null : -> Rel [ctor] .                 *** empty relation
  op _,_ : NatSet NatSet -> NatSet [ctor assoc comm id: mt] .  *** union
  op _,_ : RatSet RatSet -> RatSet [ctor assoc comm id: mt] .  *** union
  op _,_ : Rel Rel -> Rel [ctor assoc comm id: null] .         *** union
  op _in_ : Nat NatSet -> Bool .           *** membership
  op _[_] : Rel Nat -> RatSet .            *** relation application to a number
  op dom : Rel -> NatSet .                 *** domain of a relation
  op pfun : Rel -> Bool .                  *** partial function predicate
  vars n m : Nat .  var r : Rat .  var P : Pair . var S : NatSet . var R : Rel .
  eq n,n = n .                             *** idempotency
  eq P,P = P .                             *** idempotency
  eq n in mt = false .                     *** set membership
  eq n in m,S = (n == m) or n in S .       *** set membership

  *** your equations defining the functions  _[_], dom, and pfun here
  *** if you need to declare any other variables or auxiliary
  *** functions besides those above, you can also do so

endfm
