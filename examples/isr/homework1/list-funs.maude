fmod NAT-MIXFIX is
  sort Natural .
  op 0 : -> Natural [ctor] .
  op s : Natural -> Natural [ctor] .
  op _+_ : Natural Natural -> Natural .
  op _*_ : Natural Natural -> Natural .
  vars N M : Natural .
  eq N + 0 = N .
  eq N + s(M) = s(N + M) .
  eq N * 0 = 0 .
  eq N * s(M) = N + (N * M) .
endfm

fmod NAT-LIST is
  protecting NAT-MIXFIX .
  sort List .
  op nil : -> List [ctor] .
  op _;_ : Natural List -> List [ctor] .
  op length : List -> Natural .
  var N : Natural .
  var L : List .
  eq length(nil) = 0 .
  eq length(N ; L) = s(length(L)) .
endfm

fmod LIST-FUNS is
   protecting NAT-LIST .
   protecting BOOL .

   op _@_ : List List -> List .        *** list append
   op rev : List -> List .             *** list reverse
   op compact : List -> Bool .         *** compact predicate

  vars N M : Natural .
  var L Q : List .

  *** give here your equations defining the above
  *** three functions
endfm

*** some test cases:

red  (0 ; (s(s(0)) ; nil)) @ (s(s(s(0))) ; nil) .
    *** the answer should be
    *** 0 ; (s(s(0)) ; (s(s(s(0))) ; nil))

red rev(0 ; (s(s(0)) ; nil)) .
    *** the answer should be
    *** s(s(0)) ; (0 ; nil)

red compact(s(s(0)) ; (s(s(0)) ; nil)) .
    *** the answer should be false

red compact(s(s(0)) ; (s(0) ; nil)) .
    *** the answer should be true
